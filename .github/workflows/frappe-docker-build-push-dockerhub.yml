name: Build, Push, and Deploy on Tag

on:
  push:
    tags:
      - 'v*'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/frappe-custom

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate and encode apps.json
        id: apps_json
        run: |
          echo "Checking for apps.json file..."

          if [ ! -f "apps.json" ]; then
            echo "‚ùå ERROR: apps.json file not found in root directory"
            echo "Please create an apps.json file in the repository root"
            exit 1
          fi

          echo "‚úÖ apps.json file found"
          echo "üìÑ Content of apps.json:"
          cat apps.json

          # Validate JSON syntax
          if ! python3 -m json.tool apps.json > /dev/null 2>&1; then
            echo "‚ùå ERROR: apps.json is not valid JSON"
            exit 1
          fi

          echo "‚úÖ apps.json is valid JSON"

          # Convert to base64
          APPS_JSON_BASE64=$(cat apps.json | base64 -w 0)
          echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_OUTPUT

          echo "‚úÖ apps.json successfully encoded to base64"

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: images/custom/Containerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APPS_JSON_BASE64=${{ steps.apps_json.outputs.APPS_JSON_BASE64 }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Summary
        run: |
          echo "## üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest**: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.GCP_VM_SSH_KEY }}

      - name: Deploy to GCP VM with Smart Setup
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_HOST }} << 'EOF'
          set -e  # Exit on any error

          echo "üöÄ Starting smart deployment process..."

          # Configuration variables
          REPO_URL="https://github.com/getwithashish/frappe_docker.git"
          PROJECT_DIR=${HOME}/${{ secrets.GCP_VM_PROJECT_PATH }}

          # Efficient Docker environment setup
          ensure_docker_environment() {
            echo "üîß Ensuring Docker environment is ready..."

            # Update package list
            sudo apt-get update

            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
              rm get-docker.sh
              echo "‚úÖ Docker installed"
            else
              echo "‚úÖ Docker already installed"
            fi

            # Install Docker Compose plugin via package manager (most efficient)
            if ! docker compose version &> /dev/null; then
              echo "üì¶ Installing Docker Compose plugin..."
              sudo apt-get install -y docker-compose-plugin
              echo "‚úÖ Docker Compose plugin installed"
            else
              echo "‚úÖ Docker Compose plugin already installed"
            fi

            # Ensure user is in docker group
            if ! groups $USER | grep -q docker; then
              echo "üë• Adding user to docker group..."
              sudo usermod -aG docker $USER
              # Create a new shell session with updated group membership
              exec sg docker "$0"
            fi

            # Verify installation
            echo "üîç Verifying Docker installation..."
            docker --version
            docker compose version
            echo "‚úÖ Docker environment ready"
          }

          # Function to setup the project directory and repository
          setup_project() {
            echo "üìÅ Setting up project directory and repository..."

            # Create parent directory if it doesn't exist
            PARENT_DIR=$(dirname "$PROJECT_DIR")
            if [ ! -d "$PARENT_DIR" ]; then
              echo "üìÅ Creating parent directory: $PARENT_DIR"
              mkdir -p "$PARENT_DIR"
            fi

            # Check if project directory exists
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "üìÅ Project directory doesn't exist. Creating: $PROJECT_DIR"
              mkdir -p "$PROJECT_DIR"

              # Clone the repository
              echo "üì• Cloning repository..."
              git clone "$REPO_URL" "$PROJECT_DIR"
              echo "‚úÖ Repository cloned successfully"
            else
              echo "üìÅ Project directory exists: $PROJECT_DIR"

              # Check if it's a git repository
              if [ -d "$PROJECT_DIR/.git" ]; then
                echo "üì• Git repository found. Pulling latest changes..."
                cd "$PROJECT_DIR"

                # Stash any local changes
                git stash push -m "Auto-stash before deployment $(date)"

                # Ensure we're on the correct branch and pull latest changes
                git fetch origin

                # Try to checkout main, then master, then stay on current branch
                if git show-ref --verify --quiet refs/remotes/origin/main; then
                  git checkout main
                  git pull origin main
                elif git show-ref --verify --quiet refs/remotes/origin/master; then
                  git checkout master
                  git pull origin master
                else
                  echo "Using current branch: $(git branch --show-current)"
                  git pull origin $(git branch --show-current)
                fi

                echo "‚úÖ Repository updated successfully"
              else
                echo "‚ùå Directory exists but is not a git repository"
                echo "üîÑ Removing existing directory and cloning fresh..."
                rm -rf "$PROJECT_DIR"
                git clone "$REPO_URL" "$PROJECT_DIR"
                echo "‚úÖ Fresh repository cloned successfully"
              fi
            fi
          }

          # Function to deploy the application
          deploy_application() {
            echo "üöÄ Deploying application..."
            cd "$PROJECT_DIR"

            # Check if pwd.yml exists
            if [ ! -f "pwd.yml" ]; then
              echo "‚ùå ERROR: pwd.yml not found in $PROJECT_DIR"
              echo "üìã Available files:"
              ls -la
              exit 1
            fi

            # Create backup of current state
            echo "üì¶ Creating backup of current state..."
            if docker compose -f pwd.yml ps -q | grep -q .; then
              docker compose -f pwd.yml ps --format json > "backup-$(date +%Y%m%d-%H%M%S).json"
            fi

            echo "üê≥ Pulling latest Docker images..."
            docker compose -f pwd.yml pull

            echo "üîÑ Stopping existing containers..."
            docker compose -f pwd.yml down --remove-orphans

            echo "üèóÔ∏è Building and starting containers with latest images..."
            docker compose -f pwd.yml up --build --force-recreate -d

            # Wait for containers to start
            echo "‚è≥ Waiting for containers to be ready..."
            sleep 30

            # Check if containers are running
            if ! docker compose -f pwd.yml ps | grep -q "Up"; then
              echo "‚ùå ERROR: Containers failed to start properly"
              echo "üìú Container logs:"
              docker compose -f pwd.yml logs
              exit 1
            fi

            echo "üßπ Cleaning up old images..."
            docker image prune -f

            echo "üìã Current container status:"
            docker compose -f pwd.yml ps

            echo "‚úÖ Application deployed successfully!"
          }

          # Function to perform health checks
          perform_health_checks() {
            echo "üîç Performing health checks..."
            cd "$PROJECT_DIR"

            # Check container health
            UNHEALTHY_CONTAINERS=$(docker compose -f pwd.yml ps --format json | jq -r '.[] | select(.Health == "unhealthy") | .Name' 2>/dev/null || echo "")

            if [ -n "$UNHEALTHY_CONTAINERS" ]; then
              echo "‚ùå Unhealthy containers detected: $UNHEALTHY_CONTAINERS"
              echo "üìú Logs for unhealthy containers:"
              echo "$UNHEALTHY_CONTAINERS" | while read container; do
                echo "--- Logs for $container ---"
                docker logs "$container" --tail=20
              done
              exit 1
            fi

            # Check if all expected containers are running
            EXPECTED_SERVICES=$(docker compose -f pwd.yml config --services | wc -l)
            RUNNING_SERVICES=$(docker compose -f pwd.yml ps --format json | jq -r '.[] | select(.State == "running")' | wc -l)

            if [ "$RUNNING_SERVICES" -ne "$EXPECTED_SERVICES" ]; then
              echo "‚ùå Not all services are running. Expected: $EXPECTED_SERVICES, Running: $RUNNING_SERVICES"
              docker compose -f pwd.yml ps
              exit 1
            fi

            echo "‚úÖ All health checks passed!"
          }

          # Main execution flow
          echo "1Ô∏è‚É£ Ensuring Docker environment is ready..."
          ensure_docker_environment

          echo "2Ô∏è‚É£ Setting up project and repository..."
          setup_project

          echo "3Ô∏è‚É£ Deploying application..."
          deploy_application

          echo "4Ô∏è‚É£ Performing health checks..."
          perform_health_checks

          echo "‚úÖ Deployment completed successfully!"
          echo "üéØ Deployed image: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          echo "üîó Repository: $REPO_URL"
          echo "üìç Location: $PROJECT_DIR"
          EOF

      - name: Verify Deployment Status
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_HOST }} << 'EOF'
          cd "${{ secrets.GCP_VM_PROJECT_PATH }}"

          echo "üîç Final deployment verification..."

          # Show running containers
          echo "üìä Running containers:"
          docker compose -f pwd.yml ps

          # Show resource usage
          echo "üìà Resource usage:"
          docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"

          # Show disk usage
          echo "üíæ Docker disk usage:"
          docker system df

          echo "‚úÖ Deployment verification completed!"
          EOF

      - name: Deployment Summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: ${{ secrets.GCP_VM_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Path**: ${{ secrets.GCP_VM_PROJECT_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Latest Tag**: ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ‚úÖ Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
